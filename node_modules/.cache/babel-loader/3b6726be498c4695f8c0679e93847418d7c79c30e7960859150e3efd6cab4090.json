{"ast":null,"code":"export default function CreateBoard(row, col, bombs) {\n  // Board for storing the values for each cell\n  let board = [];\n  // Tracking the minelocation \n  let mineLocation = [];\n  // Create blank board\n\n  for (let x = 0; x < row; x++) {\n    let subCol = [];\n    for (let y = 0; y < col; y++) {\n      subCol.push({\n        value: 0,\n        revealed: false,\n        x: x,\n        y: y,\n        flagged: false\n      });\n    }\n    board.push(subCol);\n  }\n\n  // Randomize Bomb Placement\n  let bombsCount = 0;\n  while (bombsCount < bombs) {\n    // Implementing random function\n    let x = random(0, row - 1);\n    let y = random(0, col - 1);\n\n    // placing bomb at random location(x,y) on board[x][y]\n    if (board[x][y].value === 0) {\n      board[x][y].value = \"X\";\n      mineLocation.push([x, y]);\n      bombsCount++;\n    }\n  }\n\n  // Increasing the value of specific cell \n  // If the cell has mines increasing the cell value by 1.\n  // Add Numbers\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (board[i][j].value === \"X\") {\n        continue;\n      }\n\n      // Top\n      if (i > 0 && board[i - 1][j].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // Top Right\n      if (i > 0 && j < col - 1 && board[i - 1][j + 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // Right\n      if (j < col - 1 && board[i][j + 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // Botoom Right\n      if (i < row - 1 && j < col - 1 && board[i + 1][j + 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // Bottom\n      if (i < row - 1 && board[i + 1][j].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // Bottom Left\n      if (i < row - 1 && j > 0 && board[i + 1][j - 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // LEft\n      if (j > 0 && board[i][j - 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // Top Left\n      if (i > 0 && j > 0 && board[i - 1][j - 1].value === \"X\") {\n        board[i][j].value++;\n      }\n    }\n  }\n  return {\n    board,\n    mineLocation\n  };\n}\n_c = CreateBoard;\n;\n\n// Random function used for generating random value of x & y\nfunction random() {\n  let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let max = arguments.length > 1 ? arguments[1] : undefined;\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nvar _c;\n$RefreshReg$(_c, \"CreateBoard\");","map":{"version":3,"names":["CreateBoard","row","col","bombs","board","mineLocation","x","subCol","y","push","value","revealed","flagged","bombsCount","random","i","j","_c","min","arguments","length","undefined","max","Math","floor","$RefreshReg$"],"sources":["E:/minesweeper/minesweeper/src/Components/Utils/Create-Board.js"],"sourcesContent":["export default function CreateBoard(row, col, bombs){\r\n    // Board for storing the values for each cell\r\n      let board = [];\r\n    // Tracking the minelocation \r\n      let mineLocation = [];\r\n      // Create blank board\r\n    \r\n      for (let x = 0; x < row; x++) {\r\n        let subCol = [];\r\n        for (let y = 0; y < col; y++) {\r\n          subCol.push({\r\n            value: 0,\r\n            revealed: false,\r\n            x: x,\r\n            y: y,\r\n            flagged: false,\r\n          });\r\n        }\r\n        board.push(subCol);\r\n      }\r\n    \r\n      // Randomize Bomb Placement\r\n      let bombsCount = 0;\r\n      while (bombsCount < bombs) {\r\n        // Implementing random function\r\n        let x = random(0, row - 1);\r\n        let y = random(0, col - 1);\r\n    \r\n        // placing bomb at random location(x,y) on board[x][y]\r\n        if (board[x][y].value === 0) {\r\n          board[x][y].value = \"X\";\r\n          mineLocation.push([x, y]);\r\n          bombsCount++;\r\n        }\r\n      }\r\n    \r\n      // Increasing the value of specific cell \r\n      // If the cell has mines increasing the cell value by 1.\r\n      // Add Numbers\r\n      for (let i = 0; i < row; i++) {\r\n        for (let j = 0; j < col; j++) {\r\n          if (board[i][j].value === \"X\") {\r\n            continue;\r\n          }\r\n    \r\n          // Top\r\n          if (i > 0 && board[i - 1][j].value === \"X\") {\r\n            board[i][j].value++;\r\n          }\r\n    \r\n          // Top Right\r\n          if (\r\n            i > 0 &&\r\n            j < col - 1 &&\r\n            board[i - 1][j + 1].value === \"X\"\r\n          ) {\r\n            board[i][j].value++;\r\n          }\r\n    \r\n          // Right\r\n          if (j < col - 1 && board[i][j + 1].value === \"X\") {\r\n            board[i][j].value++;\r\n          }\r\n    \r\n          // Botoom Right\r\n          if (\r\n            i < row - 1 &&\r\n            j < col - 1 &&\r\n            board[i + 1][j + 1].value === \"X\"\r\n          ) {\r\n            board[i][j].value++;\r\n          }\r\n    \r\n          // Bottom\r\n          if (i < row - 1 && board[i + 1][j].value === \"X\") {\r\n            board[i][j].value++;\r\n          }\r\n    \r\n          // Bottom Left\r\n          if (\r\n            i < row - 1 &&\r\n            j > 0 &&\r\n            board[i + 1][j - 1].value === \"X\"\r\n          ) {\r\n            board[i][j].value++;\r\n          }\r\n    \r\n          // LEft\r\n          if (j > 0 && board[i][j - 1].value === \"X\") {\r\n            board[i][j].value++;\r\n          }\r\n    \r\n          // Top Left\r\n          if (i > 0 && j > 0 && board[i - 1][j - 1].value === \"X\") {\r\n            board[i][j].value++;\r\n          }\r\n        }\r\n      }\r\n      return { board, mineLocation };\r\n    };\r\n    \r\n    // Random function used for generating random value of x & y\r\n    function random(min = 0, max) {\r\n      // min and max included\r\n      return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}