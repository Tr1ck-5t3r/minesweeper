{"ast":null,"code":"var _jsxFileName = \"E:\\\\minesweeper\\\\minesweeper\\\\src\\\\Components\\\\Game-components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CreateBoard from '../Utils/CreateBoard';\nimport { revealed } from \"../Utils/Reveal\";\nimport Cell from './Cell';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board() {\n  _s();\n  //const [grid,setGrid]=useState([]);\n  const [nonMinecount, setNonMinecount] = useState(0);\n  const [mineLocation, setmineLocation] = useState([]);\n  const style = {\n    display: 'flex',\n    flexDirection: 'row',\n    width: 'fit-content',\n    color: 'white'\n  };\n  useEffect(() => {\n    freshBoard();\n  }, []);\n\n  // Making freshboard atstart\n  const freshBoard = () => {\n    const newBoard = CreateBoard(10, 10, 20);\n    setNonMinecount(10 * 10 - 20);\n    setmineLocation(newBoard.mineLocation);\n    setGrid(newBoard.board);\n  };\n  const updateFlag = (e, x, y) => {\n    e.preventDefault();\n    // deep copy of the object\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[x][y].flagged = true;\n    console.log(newGrid[x][y]);\n    setGrid(newGrid);\n  };\n  const newfresh = () => {\n    freshBoard();\n  };\n  const revealcell = (x, y) => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    if (newGrid[x][y].value === \"X\") {\n      toast.dark(' Clicked on Mine ,Try Again', {\n        position: \"top-center\",\n        autoClose: 1000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n      for (let i = 0; i < mineLocation.length; i++) {\n        newGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n      }\n      setGrid(newGrid);\n      setTimeout(newfresh, 500);\n    }\n    if (nonMinecount === 0) {\n      toast.success('Wohoo!!,You won', {\n        position: \"top-center\",\n        autoClose: 1000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n      setTimeout(newfresh, 500);\n    } else {\n      let revealedboard = revealed(newGrid, x, y, nonMinecount);\n      setGrid(revealedboard.arr);\n      setNonMinecount(revealedboard.newNonMines);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parent\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Game-area\",\n        children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), grid.map((singlerow, index1) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: style,\n            children: singlerow.map((singlecol, index2) => {\n              return /*#__PURE__*/_jsxDEV(Cell, {\n                details: singlecol,\n                updateFlag: updateFlag,\n                revealcell: revealcell\n              }, index2, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 37\n              }, this);\n            })\n          }, index1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n}\n_s(Board, \"X/gnH8PZrjaiP9NphU5Mt87AEUs=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","CreateBoard","revealed","Cell","toast","ToastContainer","jsxDEV","_jsxDEV","Board","_s","nonMinecount","setNonMinecount","mineLocation","setmineLocation","style","display","flexDirection","width","color","freshBoard","newBoard","setGrid","board","updateFlag","e","x","y","preventDefault","newGrid","JSON","parse","stringify","grid","flagged","console","log","newfresh","revealcell","value","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","i","length","setTimeout","success","revealedboard","arr","newNonMines","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","singlerow","index1","singlecol","index2","details","_c","$RefreshReg$"],"sources":["E:/minesweeper/minesweeper/src/Components/Game-components/Board.js"],"sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport CreateBoard from '../Utils/CreateBoard';\r\nimport { revealed } from \"../Utils/Reveal\";\r\nimport Cell from './Cell';\r\nimport { toast,ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nfunction Board() {\r\n    //const [grid,setGrid]=useState([]);\r\n    const [nonMinecount,setNonMinecount]=useState(0);\r\n    const [mineLocation,setmineLocation]=useState([]);\r\n    const style={\r\n        display : 'flex',\r\n        flexDirection : 'row',\r\n        width:'fit-content',\r\n        color:'white',\r\n    }\r\n    useEffect(()=>{\r\n        \r\n        freshBoard();\r\n    },[]);\r\n\r\n    // Making freshboard atstart\r\n    const freshBoard = () => {\r\n        const newBoard=CreateBoard(10,10,20);\r\n        setNonMinecount(10*10-20);\r\n        setmineLocation(newBoard.mineLocation);\r\n        setGrid(newBoard.board);\r\n    }\r\n    const updateFlag=(e,x,y)=>{\r\n        e.preventDefault();\r\n        // deep copy of the object\r\n        let newGrid=JSON.parse(JSON.stringify(grid));\r\n        newGrid[x][y].flagged=true;\r\n        console.log(newGrid[x][y]);\r\n        setGrid(newGrid);\r\n    }\r\n    const newfresh=()=>{\r\n        freshBoard();\r\n    }\r\n    const revealcell=(x,y)=>{\r\n        let newGrid=JSON.parse(JSON.stringify(grid));\r\n        if(newGrid[x][y].value===\"X\"){\r\n            toast.dark(' Clicked on Mine ,Try Again', { position: \"top-center\", autoClose: 1000, hideProgressBar: false, closeOnClick: true, pauseOnHover: true, draggable: true, progress: undefined, });\r\n            for(let i=0;i<mineLocation.length;i++){\r\n                newGrid[mineLocation[i][0]][mineLocation[i][1]].revealed=true;\r\n            }\r\n            setGrid(newGrid);\r\n            setTimeout(newfresh,500);\r\n        }\r\n        if(nonMinecount===0){\r\n            toast.success('Wohoo!!,You won',{ position: \"top-center\", autoClose: 1000, hideProgressBar: false, closeOnClick: true, pauseOnHover: true, draggable: true, progress: undefined, });\r\n            setTimeout(newfresh,500);\r\n        }\r\n        else{\r\n            let revealedboard=revealed(newGrid,x,y,nonMinecount);\r\n            setGrid(revealedboard.arr);\r\n            setNonMinecount(revealedboard.newNonMines);\r\n        }\r\n        \r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <div className=\"parent\">\r\n            <div className='Game-area'>\r\n                {/* <h3 style={{color:'white',textAlign:'center',fontSize:'30px',margin:'0px'}}>Non-Mines - {nonMinecount}</h3> */}\r\n                <ToastContainer></ToastContainer>\r\n                {grid.map((singlerow,index1)=>{\r\n                    return (\r\n                        <div style={style} key={index1}>\r\n                            {singlerow.map((singlecol,index2)=>{\r\n                            return  <Cell details={singlecol} key={index2} updateFlag={updateFlag} revealcell={revealcell}/>\r\n                            })}\r\n                            \r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n          \r\n        </div>\r\n      </div>\r\n    ) \r\n}\r\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}