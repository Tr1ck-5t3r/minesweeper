{"ast":null,"code":"export default function CreateBoard(row, col, mines) {\n  // Board for storing the values for each cell\n  let board = [];\n  // Tracking the minelocation \n  let mineLocation = [];\n  // Create blank board\n\n  for (let x = 0; x < row; x++) {\n    let subCol = [];\n    for (let y = 0; y < col; y++) {\n      subCol.push({\n        value: 0,\n        revealed: false,\n        x: x,\n        y: y,\n        flagged: false\n      });\n    }\n    board.push(subCol);\n  }\n\n  // Randomize Bomb Placement\n  let minesCount = 0;\n  let minesl = [];\n  console.log(\"hi\");\n  while (minesCount < mines) {\n    // Implementing random function\n    let x = random(0, row - 1);\n    let y = random(0, col - 1);\n\n    // placing bomb at random location(x,y) on board[x][y]\n    if (board[x][y].value === 0) {\n      board[x][y].value = \"X\";\n      mineLocation.push([x, y]);\n      minesCount++;\n      minesl.append([x, y]);\n    }\n  }\n  console.log(\"hi\", minesCount);\n  console.log(\"hi\", minesl);\n  // Increasing the value of specific cell \n  // If the cell has mines increasing the cell value by 1.\n  // Add Numbers\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (board[i][j].value === \"X\") {\n        continue;\n      }\n\n      // Top\n      if (i > 0 && board[i - 1][j].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // Top Right\n      if (i > 0 && j < col - 1 && board[i - 1][j + 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // Right\n      if (j < col - 1 && board[i][j + 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // Botoom Right\n      if (i < row - 1 && j < col - 1 && board[i + 1][j + 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // Bottom\n      if (i < row - 1 && board[i + 1][j].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // Bottom Left\n      if (i < row - 1 && j > 0 && board[i + 1][j - 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // LEft\n      if (j > 0 && board[i][j - 1].value === \"X\") {\n        board[i][j].value++;\n      }\n\n      // Top Left\n      if (i > 0 && j > 0 && board[i - 1][j - 1].value === \"X\") {\n        board[i][j].value++;\n      }\n    }\n  }\n  return {\n    board,\n    mineLocation\n  };\n}\n_c = CreateBoard;\n;\n\n// Random function used for generating random value of x & y\nfunction random() {\n  let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let max = arguments.length > 1 ? arguments[1] : undefined;\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nvar _c;\n$RefreshReg$(_c, \"CreateBoard\");","map":{"version":3,"names":["CreateBoard","row","col","mines","board","mineLocation","x","subCol","y","push","value","revealed","flagged","minesCount","minesl","console","log","random","append","i","j","_c","min","arguments","length","undefined","max","Math","floor","$RefreshReg$"],"sources":["E:/minesweeper/minesweeper/src/Components/Utils/CreateBoard.js"],"sourcesContent":["export default function CreateBoard(row, col, mines){\r\n  // Board for storing the values for each cell\r\n    let board = [];\r\n  // Tracking the minelocation \r\n    let mineLocation = [];\r\n    // Create blank board\r\n  \r\n    for (let x = 0; x < row; x++) {\r\n      let subCol = [];\r\n      for (let y = 0; y < col; y++) {\r\n        subCol.push({\r\n          value: 0,\r\n          revealed: false,\r\n          x: x,\r\n          y: y,\r\n          flagged: false,\r\n        });\r\n      }\r\n      board.push(subCol);\r\n    }\r\n  \r\n    // Randomize Bomb Placement\r\n    let minesCount = 0;\r\n    let minesl=[];\r\n    console.log(\"hi\");\r\n    while (minesCount < mines) {\r\n      // Implementing random function\r\n      let x = random(0, row - 1);\r\n      let y = random(0, col - 1);\r\n  \r\n      // placing bomb at random location(x,y) on board[x][y]\r\n      if (board[x][y].value === 0) {\r\n        board[x][y].value = \"X\";\r\n        mineLocation.push([x, y]);\r\n        minesCount++;\r\n        minesl.append([x,y]);\r\n      }\r\n    }\r\n\r\n    console.log(\"hi\",minesCount)\r\n    console.log(\"hi\",minesl)\r\n    // Increasing the value of specific cell \r\n    // If the cell has mines increasing the cell value by 1.\r\n    // Add Numbers\r\n    for (let i = 0; i < row; i++) {\r\n      for (let j = 0; j < col; j++) {\r\n        if (board[i][j].value === \"X\") {\r\n          continue;\r\n        }\r\n  \r\n        // Top\r\n        if (i > 0 && board[i - 1][j].value === \"X\") {\r\n          board[i][j].value++;\r\n        }\r\n  \r\n        // Top Right\r\n        if (\r\n          i > 0 &&\r\n          j < col - 1 &&\r\n          board[i - 1][j + 1].value === \"X\"\r\n        ) {\r\n          board[i][j].value++;\r\n        }\r\n  \r\n        // Right\r\n        if (j < col - 1 && board[i][j + 1].value === \"X\") {\r\n          board[i][j].value++;\r\n        }\r\n  \r\n        // Botoom Right\r\n        if (\r\n          i < row - 1 &&\r\n          j < col - 1 &&\r\n          board[i + 1][j + 1].value === \"X\"\r\n        ) {\r\n          board[i][j].value++;\r\n        }\r\n  \r\n        // Bottom\r\n        if (i < row - 1 && board[i + 1][j].value === \"X\") {\r\n          board[i][j].value++;\r\n        }\r\n  \r\n        // Bottom Left\r\n        if (\r\n          i < row - 1 &&\r\n          j > 0 &&\r\n          board[i + 1][j - 1].value === \"X\"\r\n        ) {\r\n          board[i][j].value++;\r\n        }\r\n  \r\n        // LEft\r\n        if (j > 0 && board[i][j - 1].value === \"X\") {\r\n          board[i][j].value++;\r\n        }\r\n  \r\n        // Top Left\r\n        if (i > 0 && j > 0 && board[i - 1][j - 1].value === \"X\") {\r\n          board[i][j].value++;\r\n        }\r\n      }\r\n    }\r\n    return { board, mineLocation };\r\n  };\r\n  \r\n  // Random function used for generating random value of x & y\r\n  function random(min = 0, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}